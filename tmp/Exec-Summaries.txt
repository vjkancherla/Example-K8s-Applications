Executive Summary: Terraform Improvements

Objective: To streamline and enhance the efficiency of our current Terraform deployment process, addressing complexities and ambiguities in the current setup.

Key Recommendations:

[1] Version Pinning:
    - Implement pinning for Terraform versions, providers, and modules using a ".terraform-version" file and tfenv tool.
    - Specific version pinning of Terraform providers and modules to ensure compatibility and predictability in deployments.

[2] Repository Structure Overhaul:
    - Restructure the Terraform repository to adopt a multi-layer Infrastructure as Code (IaC) model for improved clarity and ease of navigation.
    - Introduce a logical layering system, such as 'base_network', 'storage', 'compute', etc., for a more organized and intuitive repository.

[3] Simplified Deployment Process:
    - Propose a streamlined shell script approach for deploying resources to different AWS environments, enhancing the automation and efficiency of the deployment process.

[4] Optimized Environment Configuration:
    - Implement a structured approach to manage environment-specific configurations using 'tfvars' files within each layer, ensuring clear separation and manageability of different deployment environments.

Conclusion: These recommendations are designed to simplify the Terraform deployment process, reduce complexity, enhance predictability, and improve overall infrastructure management.

===============

Executive Summary: EKS Optimizations

Objective: To modernize and optimize the deployment and management of our EKS environments, focusing on cost-efficiency, security, and ease of management.

Key Recommendations:

[1] AWS Blueprints for EKS Deployment:
    - Adopt AWS "Blueprints" for standardized and simplified deployment of EKS and its add-ons, minimizing complexity and inter-dependency issues.
    - Use Terraform's Helm resource for deploying add-ons not covered by Blueprints, like Calico and Kubernetes Replicator.

[2] Compute Cost Optimization with Karpenter:
    - Implement Karpenter for dynamic and cost-effective compute resource management in EKS, including the strategic use of SPOT instances and automated Kubernetes version upgrades.

[3] Kubernetes Cost Monitoring with Kubecost:
    - Introduce Kubecost for effective monitoring and management of Kubernetes costs, enhancing financial visibility and control.

[4] Cost-Saving through Multi-Tenancy:
    - Recommend leveraging multi-tenancy in EKS using VCluster to host multiple guest Kubernetes clusters, reducing costs and improving scalability and testing efficiency.

Conclusion: The proposed EKS optimizations focus on modernizing our Kubernetes infrastructure, ensuring cost-efficiency, security, and operational simplicity, paving the way for more agile and scalable containerized application deployment.

=======

Executive Summary: EKS Security Enhancements

Objective: Strengthen the security of our EKS environments with targeted technology implementations.

Key Security Actions:

[1] Switch to BottleRocket AMI: 
    - Transition EKS worker nodes from standard AMIs to BottleRocket AMI for a more secure, container-optimized environment.

[2] Implement Kubescape: 
    - Integrate Kubescape into CI/CD pipelines for continuous security scanning of Kubernetes configurations and compliance with industry standards.

[3] Deploy Gatekeeper: 
    - Enforce custom policies in Kubernetes with Gatekeeper, leveraging dynamic admission control for enhanced security governance.

[4] Adopt SOPS (Secret OPerationS) and Helm-Secrets for Secrets Management: 
    - Utilize SOPS for client-side encryption of sensitive files, managed with AWS KMS. Use Helm-Secrets plugin for secure Helm value management.

Conclusion: These initiatives aim to fortify our Kubernetes infrastructure, ensuring compliance, reducing vulnerabilities, and enhancing overall security.

=====




EKS SECURITY
===============

Securing EKS environments using BottleRocket AMI
-----------------------------------------------------
- EKS worker nodes are deployed using Standard Container Optimised AMIs. These AMI are bloated and include software packages that are not used in majority of cases.
- These unused software packages are a security risk.
- Bottlerocket is a Linux-based open-source operating system that is purpose-built by AWS for running containers. 
- Bottlerocket includes only the essential software required to run containers, and ensures that the underlying software is always secure. 

- Karpenter should be configured to used BottleRocket AMIs instead od the standard AMIs	



Introducing Security Platform for Kubernetes
-------------------------------------------------
Kubescape:
	- Kubescape is an open-source a scanning tool used for checking the security of your Kubernetes clusters against 
	  known best practices and compliance standards. 
	- It can scan Kubernetes configurations, manifests, and running clusters.	
	- Kubescape focuses on ensuring that Kubernetes deployments comply with various standards like the 
	  NSA-CISA's Kubernetes Hardening Guidance, as well as best practices from the community.
	- Kubescape can integrate with CI/CD pipelines, offering a way to incorporate security checks into the deployment process.
	
	
Gatekeeper:
	- Gatekeeper is an admission controller webhook for Kubernetes, used to enforce policies on Kubernetes clusters. 
	- It is part of the Open Policy Agent (OPA) project and allows you to define and enforce policy as code.
	- Gatekeeper focuses on enforcing custom policies that you define. These policies can control various aspects of 
	  Kubernetes resources, ensuring that they meet the specific standards and requirements of your organization.
	- It uses Kubernetes' dynamic admission control features to intercept API requests to the Kubernetes API server and 
	  apply the defined policies to these requests, either allowing or denying them based on the policy.
	  
	  

Secrets Management
--------------------
- I understand that Hashicorp vault has been chose as the tool for managing secrets. However, this will mean 
  installing/managing yet another server side tool onto the K8s server. 

Recommendation:
SOPS: 
	- SOPS (Secret OPerationS) is pure client-side solution developed by Mozilla. 
	- SOPS is not specific to Kubernetes but allows you to encrypt and decrypt any YAML or JSON file to safely 
	  store those in a source code repository. It does this by encrypting all values of such a document but leaving 
	  the keys untouched.
	- SOPS integrates with AWS KMS for encryption key management
	
The Helm's "Helm-Secrets" plugin (https://github.com/jkroepke/helm-secrets) is recommend for encrypting/decrypting helm values with SOPS.

Examples of how to uses Helm-Secrets
- https://medium.com/@samuelbagattin/partial-helm-values-encryption-using-aws-kms-with-argocd-aca1c0d36323
- https://towardsaws.com/kubernets-secrets-encryption-using-helm-secret-plugin-and-sops-e36fc60c7f47
- https://www.youtube.com/watch?v=hRSlKRvYe1A
	
=====

Proposal for Optimizing Deployment Processes by Transitioning from Ansible to Terraform and Helm

Date: 
Prepared by: 

Executive Summary:
This proposal outlines the current challenges associated with using Ansible for deploying Terraform resources to the cloud and managing Kubernetes workloads with Helm charts. It suggests a transition to directly using Terraform and Helm to simplify these processes, reduce cognitive load, and enhance overall efficiency.

Introduction:
    - In our current infrastructure management, Ansible plays a pivotal role in deploying Terraform resources and managing Kubernetes workloads. While Ansible is a powerful tool, its application in contexts where Terraform and Helm could be used directly has led to increased complexity.

Current State Analysis:
    - Ansible's extensive functionality, when coupled with Terraform and Helm, requires our team members to maintain expertise in multiple overlapping tools. 
    - This redundancy not only affects efficiency but also significantly increases the cognitive load â€“ the mental effort required to track and manage these tools effectively.

Challenges with Current Approach:
    - Increased Complexity: Managing overlapping functionalities between Ansible, Terraform, and Helm.
    - Higher Cognitive Load: Necessitating deep knowledge and constant context-switching between different toolsets.
    - Inefficiencies: Time and resources spent managing and troubleshooting across multiple tools.

Proposed Solution: Direct Use of Terraform and Helm
    - Terraform: Directly manage and deploy cloud infrastructure, eliminating the intermediary role of Ansible.
    - Helm: Manage Kubernetes workloads and deployments directly, leveraging Helm's specific capabilities for these tasks.

Benefits of the Transition:
    - Reduced Cognitive Load: Streamlining tool usage to Terraform and Helm will significantly the complexity for the team.
    - Increased Efficiency: Direct use of Terraform and Helm can speed up deployment processes and reduce error rates.
    - Enhanced Focus: Allowing teams to specialize and develop deeper expertise in fewer, more relevant tools.
    - Cost-Effective: Minimizing the time spent on deployments and troubleshooting, leading to cost savings.

Addressing Transition Challenges:
    - Training and Support: Providing necessary training sessions to ensure a smooth transition.
    - Phased Implementation: Gradually integrating Terraform and Helm to allow adjustment and minimize disruption.
    - Continued Evaluation: Monitoring the transition process for feedback and adjustments.

Balancing Current Needs with Future Speculations:
    - In planning our infrastructure management strategy, it's crucial to balance our immediate operational needs with potential future requirements. 
    - While it's acknowledged that there may be a future need to deploy resources to physical infrastructure, our current operational reality is 
      centered around AWS cloud services. 
    - This proposal advocates for focusing on optimizing our present workflows with Terraform and Helm, which are more aligned with our existing AWS infrastructure. 
    - This focus does not preclude future adaptations but rather ensures that our current operations are as efficient and effective as possible. 
    - As our needs evolve, so too can our tool choices, ensuring that we remain agile and responsive to new requirements.

Conclusion and Recommendation:
    - This proposal strongly recommends transitioning from the use of Ansible for deploying Terraform resources and managing Kubernetes with Helm charts to a more streamlined approach using Terraform and Helm directly. 
    - This transition is expected to reduce cognitive load, enhance efficiency, and improve our deployment processes.


Next Steps:

Schedule a meeting to discuss the proposal in detail.
Develop a pilot program to demonstrate the effectiveness of Terraform and Helm in a controlled environment.

Include any relevant supporting materials that illustrate the benefits of reduced cognitive load through tool simplification.
By emphasizing the reduction of cognitive load, you not only argue for a more efficient toolset but also advocate for a work environment that is more conducive to focus and productivity.