Branching Strategy:
	- Trunk based development, with short lived feature branches
	

Git Flow
	- Git Clone Main branch. Or Git Pull to pull in latest changes
	
	- Create a Feature branch
	
	- Make small, incremental changes
	
	- Add commit messages using Conventional Commits Format
		- https://www.conventionalcommits.org/en/v1.0.0/
	
	- Run "git push origin <Feature-Branch>". This will
		- invokes the "pre-commit" plugin (https://pre-commit.com) locally to 
			- ensure that the commit's messages is correctly parsed
			- runs some other checks
			- you can enable more hooks - https://pre-commit.com/hooks.html
				- for example to ensure that you have run the unit tests locally
	
	- Create a PR in GitHub for your Feature branch. This will
		- cause Github to trigger Jenkins CI-PR Pipeline via a webhook
	 	- cause Github to trigger the Prow (+Tide) tool (https://docs.prow.k8s.io/docs/overview/) running in EKS
	 	- The Prow tool will
	 		- check whether the PR is up-to-date compared to Main. If not, it automatically rebases it
	 		- adds labels to the PR - "not-approved" etc
	 		- automatically adds reviewers to the PR, based on the OWNERS file
	 		- once a reviewer has reviewed and added the "/approved" comment,
	 		  Prow/Tide waits for CI-PR to complete successfully, and then
	 		  automatically merges the PR into Main
	 		  
	- Once the PR is merged into Main
		- Github will trigger Jenkin's CI-Main and CD-RC pipelines via a webhook
			- yes, CI and CD happens at the same time. This will:
				- ensure that tests are divided between CI/CD, making build faster
					- CI runs Unit and Integration tests
					- CD runs Regression and Acceptance (and Smoke tests)
					- CD pipeline ends after
						- successfully test suite execution
						- publishing of container images (to ECR) and helm charts (to S3) to repos
						
>>>
When deploying to Daily/UAT/Demo/Prod-RC, we specify a commit hash as a parameter to the pipeline. 
The build artefacts associated with the commit are then pulled from the repos and deployed to K8s.
<<<


Reverting a Commit from Main branch		
	- In Github identify the PR related to the commit that you want to revert
	- Navigate to the closed PR in Github. 
	- On the PR's page, you will see a "Revert" button (might need to scroll down the page). Click on it.
	- A new PR will be created to revert the commit
	- This PR will go through the same CI/CD as before, creating a new Release Candidate in the process.
	
	
				
Branching for Release
	- see BRANCHING-FOR-RELEASE.TXT

